{"version":3,"sources":["webpack:///./src/app/components/form-login/form-login.component.html","webpack:///./src/app/components/form-login/form-login.component.ts","webpack:///./src/app/components/form-login/module.ts","webpack:///./src/app/components/form-register/form-register.component.html","webpack:///./src/app/components/form-register/form-register.component.ts","webpack:///./src/app/components/form-register/module.ts","webpack:///./src/app/routes/home-page/home-page.component.html","webpack:///./src/app/routes/home-page/home-page.component.ts","webpack:///./src/app/routes/home-page/module.ts","webpack:///./src/app/routes/home-page/router.ts"],"names":[],"mappings":"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","file":"routes-home-page-module.js","sourcesContent":["module.exports = \"<section>\\n  <h2 (click)=\\\"toggleForm()\\\" id=\\\"toggleLoginForm\\\">LOGIN</h2>\\n  <div id=\\\"containerLoginForm\\\" style=\\\"display: none;\\\">\\n    <form autocomplete=\\\"off\\\" novalidate [formGroup]=\\\"form\\\" (submit)=\\\"submitForm()\\\">\\n      <label for=\\\"email-login\\\">Email</label>\\n      <input type=\\\"email\\\" name=\\\"email-login\\\" id=\\\"email-login\\\" required minlength=\\\"5\\\" formControlName = \\\"email\\\">\\n    \\n      <label for=\\\"password-login\\\">Mot de passe</label>\\n      <input type=\\\"password\\\" name=\\\"password-login\\\" id=\\\"password-login\\\" required minlength=\\\"5\\\" formControlName = \\\"password\\\">\\n    \\n      <button type=\\\"submit\\\" [disabled]='!form.valid'>Connexion</button>\\n    </form>\\n  </div>\\n</section>\"","/* \nImports & definition \n*/\n  // Imports\n  import { Component, OnInit, Input, Output, EventEmitter, OnChanges } from '@angular/core';\n  import { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\n  import { UtilsService } from \"../../services/utils/utils-service.service\";\n\n  // Inner\n  import { IdentityModel } from '../../models/identity.model';\n\n  // Definition\n  @Component({\n    selector: 'app-form-login',\n    templateUrl: './form-login.component.html',\n  })\n//\n\n\n/* Export */\n  export class FormLoginComponent implements OnInit, OnChanges {\n\n    /* \n    Config.\n    */\n      // Input/Output\n      @Input() resetFormData: Boolean\n      @Output() sendFormData = new EventEmitter();\n\n      // Declaration\n      public form: FormGroup;\n      public formData: IdentityModel;\n      public passwordError: Boolean = false;\n      public toggleFields;\n\n      // Instanciation\n      constructor(\n        private FormBuilder: FormBuilder,\n        private UtilsService: UtilsService\n      ) { };\n    //\n\n\n    /* \n    Methods\n    */\n      // Reset form\n      private resetForm = () => {\n        // Set validator\n        this.form = this.FormBuilder.group({\n          email: [undefined, Validators.required],\n          password: [undefined, Validators.required]\n        });\n\n        // Set form data obbject\n        this.formData = {\n          email: undefined,\n          firstname: undefined,\n          lastname: undefined,\n          password: undefined\n        };\n      };\n\n      // Submit form\n      public submitForm = () => {\n        // Set form data\n        this.formData = {\n          email: this.form.value.email,\n          firstname: undefined,\n          lastname: undefined,\n          password: this.form.value.password,\n        }\n\n        // Use event emmiter\n        this.sendFormData.emit(this.formData);\n      };\n\n      public toggleForm = () => {\n        this.toggleFields = document.getElementById('containerLoginForm');\n    \n        if (this.toggleFields.style.display == 'none') {\n          this.UtilsService.slideDown(this.toggleFields, 500);\n        } else {\n          this.UtilsService.slideUp(this.toggleFields, 500);\n        }\n      }\n    //\n\n    /* \n    Hooks\n    */\n      ngOnInit() {\n        this.resetForm();\n      };\n\n      ngOnChanges(changes){\n        // Reset form data when user is logged\n        if( !changes.resetFormData.firstChange && changes.resetFormData.currentValue ){\n          this.resetForm();\n        };\n      };\n    //\n  };\n//","/* \nImports \n*/\n    // Angular\n    import { NgModule } from '@angular/core';\n    import { HttpClientModule } from '@angular/common/http';\n    import { CommonModule } from '@angular/common';\n    import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n    // Inner\n    import { FormLoginComponent } from \"./form-login.component\";\n// \n\n\n/* \nDefinition & export \n*/\n    @NgModule({\n        declarations: [ FormLoginComponent ],\n        imports: [ \n            CommonModule, \n            HttpClientModule,\n            FormsModule, \n            ReactiveFormsModule\n        ],\n        exports: [ FormLoginComponent ]\n    })\n\n    export class FormLoginModule {};\n//","module.exports = \"<section>\\n  <h2 (click)=\\\"toggleForm()\\\" id=\\\"toggleRegisterForm\\\">REGISTER</h2>\\n  <div id=\\\"containerRegisterForm\\\" style=\\\"display: none;\\\">\\n    <form autocomplete=\\\"off\\\" novalidate [formGroup]=\\\"form\\\" (submit)=\\\"submitForm()\\\">\\n      <label for=\\\"email-register\\\">Email</label>\\n      <input type=\\\"email\\\" name=\\\"email-register\\\" id=\\\"email-register\\\" required minlength=\\\"5\\\" formControlName = \\\"email\\\">\\n    \\n      <label for=\\\"firstname-register\\\">Prénom</label>\\n      <input type=\\\"text\\\" name=\\\"firstname-register\\\" id=\\\"firstname-register\\\" required formControlName = \\\"firstname\\\">\\n    \\n      <label for=\\\"lastname-register\\\">Nom</label>\\n      <input type=\\\"text\\\" name=\\\"lastname-register\\\" id=\\\"lastname-register\\\" required formControlName = \\\"lastname\\\">\\n    \\n      <label for=\\\"password-register\\\">Mot de passe</label>\\n      <input type=\\\"password\\\" name=\\\"password-register\\\" id=\\\"password-register\\\" required minlength=\\\"5\\\" formControlName = \\\"password\\\">\\n    \\n      <label for=\\\"securePassword\\\">Répéter le mot de passe <span *ngIf=\\\"passwordError\\\">Incorrect</span></label>\\n      <input type=\\\"password\\\" name=\\\"securePassword\\\" id=\\\"securePassword\\\" required minlength=\\\"5\\\" formControlName = \\\"securePassword\\\">\\n    \\n      <button type=\\\"submit\\\" [disabled]='!form.valid'>Inscription</button>\\n    </form>\\n  </div>\\n</section>\"","/* \nImports & definition \n*/\n  // Imports\n  import { Component, OnInit,Input, Output, EventEmitter, OnChanges } from '@angular/core';\n  import { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\n  import { UtilsService } from \"../../services/utils/utils-service.service\";\n\n  // Inner\n  import { IdentityModel } from '../../models/identity.model';\n\n  // Definition\n  @Component({\n    selector: 'app-form-register',\n    templateUrl: './form-register.component.html',\n  })\n//\n\n\n/* Export */\n  export class FormRegisterComponent implements OnInit, OnChanges {\n\n    /* \n    Config.\n    */\n      // Input/Output\n      @Input() resetFormData: Boolean\n      @Output() sendFormData = new EventEmitter();\n\n      // Declaration\n      public form: FormGroup;\n      public formData: IdentityModel;\n      public passwordError: Boolean = false;\n      public toggleFields;\n\n      // Instanciation\n      constructor(\n        private FormBuilder: FormBuilder,\n        private UtilsService: UtilsService\n      ) { };\n    //\n\n\n    /* \n    Methods\n    */\n      // Reset form\n      private resetForm = () => {\n        // Set validator\n        this.form = this.FormBuilder.group({\n          email: [undefined, Validators.required],\n          firstname: [undefined, Validators.required],\n          lastname: [undefined, Validators.required],\n          password: [undefined, Validators.required],\n          securePassword: [undefined, Validators.required]\n        });\n\n        // Set form data obbject\n        this.formData = {\n          email: undefined,\n          firstname: undefined,\n          lastname: undefined,\n          password: undefined,\n          securePassword: undefined\n        };\n      };\n\n      // Submit form\n      public submitForm = () => {\n        // Check passwords\n        if(this.form.value.password !== this.form.value.securePassword){ this.passwordError = true } \n        else{\n          // Set login data\n          this.formData = {\n            email: this.form.value.email,\n            firstname: this.form.value.firstname,\n            lastname: this.form.value.lastname,\n            password: this.form.value.password,\n          }\n\n          // Use event emmiter\n          this.sendFormData.emit(this.formData);\n        };\n      };\n\n      public toggleForm = () => {\n        this.toggleFields = document.getElementById('containerRegisterForm');\n    \n        if (this.toggleFields.style.display == 'none') {\n          this.UtilsService.slideDown(this.toggleFields, 500);\n        } else {\n          this.UtilsService.slideUp(this.toggleFields, 500);\n        }\n      }\n    //\n\n    /* \n    Hooks\n    */\n      ngOnInit() {\n        this.resetForm();\n      };\n\n      ngOnChanges(changes){\n        // Reset form data when user is registed\n        if( !changes.resetFormData.firstChange && changes.resetFormData.currentValue ){\n          this.resetForm();\n        };\n      };\n    //\n  };\n//","/* \nImports \n*/\n    // Angular\n    import { NgModule } from '@angular/core';\n    import { HttpClientModule } from '@angular/common/http';\n    import { CommonModule } from '@angular/common';\n    import { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n    // Inner\n    import { FormRegisterComponent } from \"./form-register.component\";\n// \n\n\n/* \nDefinition & export \n*/\n    @NgModule({\n        declarations: [ FormRegisterComponent ],\n        imports: [ \n            CommonModule, \n            HttpClientModule,\n            FormsModule, \n            ReactiveFormsModule\n        ],\n        exports: [ FormRegisterComponent ]\n    })\n\n    export class FormRegisterModule {};\n//","module.exports = \"<section *ngIf=\\\"isUserLoggedIn == false; else isLogged\\\" class=\\\"homePage flexBox spaceBetween\\\">\\n    <article class=\\\"marginBoTo10\\\">\\n            <app-form-login \\n            (sendFormData)=\\\"connectUser($event)\\\" \\n            [resetFormData]=\\\"resetFormDataLogin\\\"\\n            ></app-form-login>\\n            \\n            <app-form-response\\n                *ngIf=\\\"displayReturnLogin\\\"\\n                [content]=\\\"apiMessageLogin\\\"\\n                [class]=\\\"messageClassLogin\\\"\\n                (close)=\\\"displayReturnLogin = false\\\"\\n            ></app-form-response>\\n    </article>\\n    \\n    <article class=\\\"marginBoTo10\\\">\\n        <app-form-register \\n        (sendFormData)=\\\"registerUser($event)\\\" \\n        [resetFormData]=\\\"resetFormDataRegister\\\"\\n        ></app-form-register>\\n    </article>\\n</section>\\n\\n<ng-template #isLogged>\\n    Vous êtes connectés\\n</ng-template>\"","/* \nImports & definition \n*/\n  // Imports\n  import { Component, OnInit } from '@angular/core';\n  import { Router } from '@angular/router';\n\n  // Inner\n  import { IdentityModel } from '../../models/identity.model';\n  import { ApiResponseModel } from \"../../models/api.reponse.model\";\n  import { AuthService } from \"../../services/auth/auth-service.service\";\n  import { UtilsService } from \"../../services/utils/utils-service.service\";\n  import { DataSharingService } from '../../services/data-sharing/data-sharing-service.service';\n\n  // Definition\n  @Component({\n    selector: 'app-home-page',\n    templateUrl: './home-page.component.html',\n    providers: [ AuthService ]\n  })\n//\n\n\n/* \nExport\n*/\n  export class HomePageComponent implements OnInit {\n\n    /* \n    Config.\n    */\n      // Register form data\n      public resetFormDataRegister: Boolean = false;\n\n      // Login form data\n      public resetFormDataLogin: Boolean = false;\n\n      // IsLogged\n      public isUserLoggedIn: boolean;\n\n      // Module injection\n      constructor(\n        private AuthService: AuthService,\n        private Router: Router,\n        private UtilsService: UtilsService,\n        private DataSharingService: DataSharingService\n      ) {\n        this.DataSharingService.isUserLoggedIn.subscribe( value => {\n          this.isUserLoggedIn = value;\n        });\n\n      };\n    //\n\n\n    /*\n    Methods\n    */\n      // Register new user\n      public registerUser = (data: IdentityModel) => {\n        // Send user data\n        this.AuthService.register(data)\n        .then( (apiResponse: ApiResponseModel) => {\n          this.UtilsService.flashMessage('success', 'Vous vous êtes inscrit avec succès.');\n\n          // Reset form data\n          this.resetFormDataRegister = true;\n        })\n        .catch( (apiResponse: ApiResponseModel) => {\n          if (apiResponse.error == 'Identity already exist') {\n            this.UtilsService.flashMessage('error', 'Cette adresse email est déjà utilisée.');\n          } else {\n            this.UtilsService.flashMessage('error', 'Une erreur est survenue durant l\\'inscription.');\n          }\n        })\n      };\n\n      // Connnect new user\n      public connectUser = (data: IdentityModel) => {\n        // Send user data\n        this.AuthService.login(data)\n        .then( (apiResponse: ApiResponseModel) => {\n          // API success response\n          this.Router.navigate(['/me']);\n          this.UtilsService.flashMessage('success', 'Vous vous êtes connectés avec succès.');\n          this.DataSharingService.isUserLoggedIn.next(true);\n\n          // Reset form data\n          this.resetFormDataLogin = true;\n        })\n        .catch( (apiResponse: ApiResponseModel) => {\n          if (apiResponse.error == 'Unknow identity') {\n            this.UtilsService.flashMessage('error', 'Combinaison email et mot de passe invalide.');\n          } else {\n            this.UtilsService.flashMessage('error', 'Une erreur est survenue durant la connexion.');\n          }\n        })\n      };\n\n    //\n\n\n    /* \n    Hooks\n    */\n      ngOnInit() { \n        if (this.isUserLoggedIn == true) {\n          this.Router.navigate(['/me']);\n        }\n      }\n    //\n  };\n//","/* \nImports \n*/\n    // Angular\n    import { NgModule } from '@angular/core';\n    import { CommonModule } from '@angular/common';\n\n    // Inner\n    import { Routing } from './router';\n    import { HomePageComponent } from './home-page.component';\n    import { FormRegisterModule } from \"../../components/form-register/module\";\n    import { FormLoginModule } from \"../../components/form-login/module\";\n    import { FormResponseModule } from \"../../components/form-response/module\";\n//\n\n\n/* \nDefinition \n*/\n    @NgModule({\n        declarations: [ HomePageComponent ],\n        imports: [ \n            CommonModule, \n            Routing,\n            FormRegisterModule,\n            FormLoginModule,\n            FormResponseModule\n        ]\n    })\n//\n\n\n/* \nExport \n*/\n    export class Module {};\n//","/* \nImports \n*/\n    import { ModuleWithProviders } from '@angular/core';\n    import { Routes, RouterModule } from '@angular/router';\n    import { HomePageComponent } from './home-page.component';\n//\n\n\n/* \nDefinition \n*/\n    const route: Routes = [\n        {\n            path: '',\n            component: HomePageComponent\n        }\n    ];\n//\n\n\n/* \nExport \n*/\n    export const Routing: ModuleWithProviders = RouterModule.forChild(route);\n//"],"sourceRoot":""}