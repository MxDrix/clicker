{"version":3,"sources":["webpack:///./src/app/components/form-login/form-login.component.html","webpack:///./src/app/components/form-login/form-login.component.ts","webpack:///./src/app/components/form-login/module.ts","webpack:///./src/app/components/form-register/form-register.component.html","webpack:///./src/app/components/form-register/form-register.component.ts","webpack:///./src/app/components/form-register/module.ts","webpack:///./src/app/routes/home-page/home-page.component.html","webpack:///./src/app/routes/home-page/home-page.component.ts","webpack:///./src/app/routes/home-page/module.ts","webpack:///./src/app/routes/home-page/router.ts"],"names":[],"mappings":"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","file":"routes-home-page-module.js","sourcesContent":["module.exports = \"<section>\\r\\n  <h2 (click)=\\\"toggleForm()\\\" id=\\\"toggleLoginForm\\\">LOGIN</h2>\\r\\n  <div id=\\\"containerLoginForm\\\" style=\\\"display: none;\\\">\\r\\n    <form autocomplete=\\\"off\\\" novalidate [formGroup]=\\\"form\\\" (submit)=\\\"submitForm()\\\">\\r\\n      <label for=\\\"email-login\\\">Email</label>\\r\\n      <input type=\\\"email\\\" name=\\\"email-login\\\" id=\\\"email-login\\\" required minlength=\\\"5\\\" formControlName = \\\"email\\\">\\r\\n    \\r\\n      <label for=\\\"password-login\\\">Mot de passe</label>\\r\\n      <input type=\\\"password\\\" name=\\\"password-login\\\" id=\\\"password-login\\\" required minlength=\\\"5\\\" formControlName = \\\"password\\\">\\r\\n    \\r\\n      <button type=\\\"submit\\\" [disabled]='!form.valid'>Connexion</button>\\r\\n    </form>\\r\\n  </div>\\r\\n</section>\"","/* \r\nImports & definition \r\n*/\r\n  // Imports\r\n  import { Component, OnInit, Input, Output, EventEmitter, OnChanges } from '@angular/core';\r\n  import { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\r\n  import { UtilsService } from \"../../services/utils/utils-service.service\";\r\n\r\n  // Inner\r\n  import { UserModel } from '../../models/user.model';\r\n\r\n  // Definition\r\n  @Component({\r\n    selector: 'app-form-login',\r\n    templateUrl: './form-login.component.html',\r\n  })\r\n//\r\n\r\n\r\n/* Export */\r\n  export class FormLoginComponent implements OnInit, OnChanges {\r\n\r\n    /* \r\n    Config.\r\n    */\r\n      // Input/Output\r\n      @Input() resetFormData: Boolean\r\n      @Output() sendFormData = new EventEmitter();\r\n\r\n      // Declaration\r\n      public form: FormGroup;\r\n      public formData: UserModel;\r\n      public passwordError: Boolean = false;\r\n      public toggleFields;\r\n\r\n      // Instanciation\r\n      constructor(\r\n        private FormBuilder: FormBuilder,\r\n        private UtilsService: UtilsService\r\n      ) { };\r\n    //\r\n\r\n\r\n    /* \r\n    Methods\r\n    */\r\n      // Reset form\r\n      private resetForm = () => {\r\n        // Set validator\r\n        this.form = this.FormBuilder.group({\r\n          email: [undefined, Validators.required],\r\n          password: [undefined, Validators.required]\r\n        });\r\n\r\n        // Set form data obbject\r\n        this.formData = {\r\n          email: undefined,\r\n          firstname: undefined,\r\n          lastname: undefined,\r\n          password: undefined\r\n        };\r\n      };\r\n\r\n      // Submit form\r\n      public submitForm = () => {\r\n        // Set form data\r\n        this.formData = {\r\n          email: this.form.value.email,\r\n          firstname: undefined,\r\n          lastname: undefined,\r\n          password: this.form.value.password,\r\n        }\r\n\r\n        // Use event emmiter\r\n        this.sendFormData.emit(this.formData);\r\n      };\r\n\r\n      public toggleForm = () => {\r\n        this.toggleFields = document.getElementById('containerLoginForm');\r\n    \r\n        if (this.toggleFields.style.display == 'none') {\r\n          this.UtilsService.slideDown(this.toggleFields, 500);\r\n        } else {\r\n          this.UtilsService.slideUp(this.toggleFields, 500);\r\n        }\r\n      }\r\n    //\r\n\r\n    /* \r\n    Hooks\r\n    */\r\n      ngOnInit() {\r\n        this.resetForm();\r\n      };\r\n\r\n      ngOnChanges(changes){\r\n        // Reset form data when user is logged\r\n        if( !changes.resetFormData.firstChange && changes.resetFormData.currentValue ){\r\n          this.resetForm();\r\n        };\r\n      };\r\n    //\r\n  };\r\n//","/* \r\nImports \r\n*/\r\n    // Angular\r\n    import { NgModule } from '@angular/core';\r\n    import { HttpClientModule } from '@angular/common/http';\r\n    import { CommonModule } from '@angular/common';\r\n    import { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\n    // Inner\r\n    import { FormLoginComponent } from \"./form-login.component\";\r\n// \r\n\r\n\r\n/* \r\nDefinition & export \r\n*/\r\n    @NgModule({\r\n        declarations: [ FormLoginComponent ],\r\n        imports: [ \r\n            CommonModule, \r\n            HttpClientModule,\r\n            FormsModule, \r\n            ReactiveFormsModule\r\n        ],\r\n        exports: [ FormLoginComponent ]\r\n    })\r\n\r\n    export class FormLoginModule {};\r\n//","module.exports = \"<section>\\r\\n  <h2 (click)=\\\"toggleForm()\\\" id=\\\"toggleRegisterForm\\\">REGISTER</h2>\\r\\n  <div id=\\\"containerRegisterForm\\\" style=\\\"display: none;\\\">\\r\\n    <form autocomplete=\\\"off\\\" novalidate [formGroup]=\\\"form\\\" (submit)=\\\"submitForm()\\\">\\r\\n      <label for=\\\"email-register\\\">Email</label>\\r\\n      <input type=\\\"email\\\" name=\\\"email-register\\\" id=\\\"email-register\\\" required minlength=\\\"5\\\" formControlName = \\\"email\\\">\\r\\n    \\r\\n      <label for=\\\"firstname-register\\\">Prénom</label>\\r\\n      <input type=\\\"text\\\" name=\\\"firstname-register\\\" id=\\\"firstname-register\\\" required formControlName = \\\"firstname\\\">\\r\\n    \\r\\n      <label for=\\\"lastname-register\\\">Nom</label>\\r\\n      <input type=\\\"text\\\" name=\\\"lastname-register\\\" id=\\\"lastname-register\\\" required formControlName = \\\"lastname\\\">\\r\\n    \\r\\n      <label for=\\\"password-register\\\">Mot de passe</label>\\r\\n      <input type=\\\"password\\\" name=\\\"password-register\\\" id=\\\"password-register\\\" required minlength=\\\"5\\\" formControlName = \\\"password\\\">\\r\\n    \\r\\n      <label for=\\\"securePassword\\\">Répéter le mot de passe <span *ngIf=\\\"passwordError\\\">Incorrect</span></label>\\r\\n      <input type=\\\"password\\\" name=\\\"securePassword\\\" id=\\\"securePassword\\\" required minlength=\\\"5\\\" formControlName = \\\"securePassword\\\">\\r\\n    \\r\\n      <button type=\\\"submit\\\" [disabled]='!form.valid'>Inscription</button>\\r\\n    </form>\\r\\n  </div>\\r\\n</section>\"","/* \r\nImports & definition \r\n*/\r\n  // Imports\r\n  import { Component, OnInit,Input, Output, EventEmitter, OnChanges } from '@angular/core';\r\n  import { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\r\n  import { UtilsService } from \"../../services/utils/utils-service.service\";\r\n\r\n  // Inner\r\n  import { UserModel } from '../../models/user.model';\r\n\r\n  // Definition\r\n  @Component({\r\n    selector: 'app-form-register',\r\n    templateUrl: './form-register.component.html',\r\n  })\r\n//\r\n\r\n\r\n/* Export */\r\n  export class FormRegisterComponent implements OnInit, OnChanges {\r\n\r\n    /* \r\n    Config.\r\n    */\r\n      // Input/Output\r\n      @Input() resetFormData: Boolean\r\n      @Output() sendFormData = new EventEmitter();\r\n\r\n      // Declaration\r\n      public form: FormGroup;\r\n      public formData: UserModel;\r\n      public passwordError: Boolean = false;\r\n      public toggleFields;\r\n\r\n      // Instanciation\r\n      constructor(\r\n        private FormBuilder: FormBuilder,\r\n        private UtilsService: UtilsService\r\n      ) { };\r\n    //\r\n\r\n\r\n    /* \r\n    Methods\r\n    */\r\n      // Reset form\r\n      private resetForm = () => {\r\n        // Set validator\r\n        this.form = this.FormBuilder.group({\r\n          email: [undefined, Validators.required],\r\n          firstname: [undefined, Validators.required],\r\n          lastname: [undefined, Validators.required],\r\n          password: [undefined, Validators.required],\r\n          securePassword: [undefined, Validators.required]\r\n        });\r\n\r\n        // Set form data obbject\r\n        this.formData = {\r\n          email: undefined,\r\n          firstname: undefined,\r\n          lastname: undefined,\r\n          password: undefined,\r\n          securePassword: undefined\r\n        };\r\n      };\r\n\r\n      // Submit form\r\n      public submitForm = () => {\r\n        // Check passwords\r\n        if(this.form.value.password !== this.form.value.securePassword){ this.passwordError = true } \r\n        else{\r\n          // Set login data\r\n          this.formData = {\r\n            email: this.form.value.email,\r\n            firstname: this.form.value.firstname,\r\n            lastname: this.form.value.lastname,\r\n            password: this.form.value.password,\r\n          }\r\n\r\n          // Use event emmiter\r\n          this.sendFormData.emit(this.formData);\r\n        };\r\n      };\r\n\r\n      public toggleForm = () => {\r\n        this.toggleFields = document.getElementById('containerRegisterForm');\r\n    \r\n        if (this.toggleFields.style.display == 'none') {\r\n          this.UtilsService.slideDown(this.toggleFields, 500);\r\n        } else {\r\n          this.UtilsService.slideUp(this.toggleFields, 500);\r\n        }\r\n      }\r\n    //\r\n\r\n    /* \r\n    Hooks\r\n    */\r\n      ngOnInit() {\r\n        this.resetForm();\r\n      };\r\n\r\n      ngOnChanges(changes){\r\n        // Reset form data when user is registed\r\n        if( !changes.resetFormData.firstChange && changes.resetFormData.currentValue ){\r\n          this.resetForm();\r\n        };\r\n      };\r\n    //\r\n  };\r\n//","/* \r\nImports \r\n*/\r\n    // Angular\r\n    import { NgModule } from '@angular/core';\r\n    import { HttpClientModule } from '@angular/common/http';\r\n    import { CommonModule } from '@angular/common';\r\n    import { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\n    // Inner\r\n    import { FormRegisterComponent } from \"./form-register.component\";\r\n// \r\n\r\n\r\n/* \r\nDefinition & export \r\n*/\r\n    @NgModule({\r\n        declarations: [ FormRegisterComponent ],\r\n        imports: [ \r\n            CommonModule, \r\n            HttpClientModule,\r\n            FormsModule, \r\n            ReactiveFormsModule\r\n        ],\r\n        exports: [ FormRegisterComponent ]\r\n    })\r\n\r\n    export class FormRegisterModule {};\r\n//","module.exports = \"<section *ngIf=\\\"isUserLoggedIn == false; else isLogged\\\" class=\\\"homePage flexBox spaceBetween\\\">\\r\\n    <article class=\\\"marginBoTo10\\\">\\r\\n            <app-form-login \\r\\n            (sendFormData)=\\\"connectUser($event)\\\" \\r\\n            [resetFormData]=\\\"resetFormDataLogin\\\"\\r\\n            ></app-form-login>\\r\\n            \\r\\n            <app-form-response\\r\\n                *ngIf=\\\"displayReturnLogin\\\"\\r\\n                [content]=\\\"apiMessageLogin\\\"\\r\\n                [class]=\\\"messageClassLogin\\\"\\r\\n                (close)=\\\"displayReturnLogin = false\\\"\\r\\n            ></app-form-response>\\r\\n    </article>\\r\\n    \\r\\n    <article class=\\\"marginBoTo10\\\">\\r\\n        <app-form-register \\r\\n        (sendFormData)=\\\"registerUser($event)\\\" \\r\\n        [resetFormData]=\\\"resetFormDataRegister\\\"\\r\\n        ></app-form-register>\\r\\n    </article>\\r\\n</section>\\r\\n\\r\\n<ng-template #isLogged>\\r\\n    Vous êtes connectés\\r\\n</ng-template>\"","/* \r\nImports & definition \r\n*/\r\n  // Imports\r\n  import { Component, OnInit } from '@angular/core';\r\n  import { Router } from '@angular/router';\r\n\r\n  // Inner\r\n  import { UserModel } from '../../models/user.model';\r\n  import { ApiResponseModel } from \"../../models/api.reponse.model\";\r\n  import { AuthService } from \"../../services/auth/auth-service.service\";\r\n  import { UtilsService } from \"../../services/utils/utils-service.service\";\r\n  import { DataSharingService } from '../../services/data-sharing/data-sharing-service.service';\r\n\r\n  // Definition\r\n  @Component({\r\n    selector: 'app-home-page',\r\n    templateUrl: './home-page.component.html',\r\n    providers: [ AuthService ]\r\n  })\r\n//\r\n\r\n\r\n/* \r\nExport\r\n*/\r\n  export class HomePageComponent implements OnInit {\r\n\r\n    /* \r\n    Config.\r\n    */\r\n      // Register form data\r\n      public resetFormDataRegister: Boolean = false;\r\n\r\n      // Login form data\r\n      public resetFormDataLogin: Boolean = false;\r\n\r\n      // IsLogged\r\n      public isUserLoggedIn: boolean;\r\n\r\n      // Module injection\r\n      constructor(\r\n        private AuthService: AuthService,\r\n        private Router: Router,\r\n        private UtilsService: UtilsService,\r\n        private DataSharingService: DataSharingService\r\n      ) {\r\n        this.DataSharingService.isUserLoggedIn.subscribe( value => {\r\n          this.isUserLoggedIn = value;\r\n        });\r\n\r\n      };\r\n    //\r\n\r\n\r\n    /*\r\n    Methods\r\n    */\r\n      // Register new user\r\n      public registerUser = (data: UserModel) => {\r\n        // Send user data\r\n        this.AuthService.register(data)\r\n        .then( (apiResponse: ApiResponseModel) => {\r\n          this.UtilsService.flashMessage('success', 'Vous vous êtes inscrit avec succès.');\r\n\r\n          // Reset form data\r\n          this.resetFormDataRegister = true;\r\n        })\r\n        .catch( (apiResponse: ApiResponseModel) => {\r\n          if (apiResponse.error == 'Identity already exist') {\r\n            this.UtilsService.flashMessage('error', 'Cette adresse email est déjà utilisée.');\r\n          } else {\r\n            this.UtilsService.flashMessage('error', 'Une erreur est survenue durant l\\'inscription.');\r\n          }\r\n        })\r\n      };\r\n\r\n      // Connnect new user\r\n      public connectUser = (data: UserModel) => {\r\n        // Send user data\r\n        this.AuthService.login(data)\r\n        .then( (apiResponse: ApiResponseModel) => {\r\n          // API success response\r\n          this.Router.navigate(['/me']);\r\n          this.UtilsService.flashMessage('success', 'Vous vous êtes connectés avec succès.');\r\n          this.DataSharingService.isUserLoggedIn.next(true);\r\n\r\n          // Reset form data\r\n          this.resetFormDataLogin = true;\r\n        })\r\n        .catch( (apiResponse: ApiResponseModel) => {\r\n          if (apiResponse.error == 'Unknow identity') {\r\n            this.UtilsService.flashMessage('error', 'Combinaison email et mot de passe invalide.');\r\n          } else {\r\n            this.UtilsService.flashMessage('error', 'Une erreur est survenue durant la connexion.');\r\n          }\r\n        })\r\n      };\r\n\r\n    //\r\n\r\n\r\n    /* \r\n    Hooks\r\n    */\r\n      ngOnInit() { \r\n        if (this.isUserLoggedIn == true) {\r\n          this.Router.navigate(['/me']);\r\n        }\r\n      }\r\n    //\r\n  };\r\n//","/* \r\nImports \r\n*/\r\n    // Angular\r\n    import { NgModule } from '@angular/core';\r\n    import { CommonModule } from '@angular/common';\r\n\r\n    // Inner\r\n    import { Routing } from './router';\r\n    import { HomePageComponent } from './home-page.component';\r\n    import { FormRegisterModule } from \"../../components/form-register/module\";\r\n    import { FormLoginModule } from \"../../components/form-login/module\";\r\n    import { FormResponseModule } from \"../../components/form-response/module\";\r\n//\r\n\r\n\r\n/* \r\nDefinition \r\n*/\r\n    @NgModule({\r\n        declarations: [ HomePageComponent ],\r\n        imports: [ \r\n            CommonModule, \r\n            Routing,\r\n            FormRegisterModule,\r\n            FormLoginModule,\r\n            FormResponseModule\r\n        ]\r\n    })\r\n//\r\n\r\n\r\n/* \r\nExport \r\n*/\r\n    export class Module {};\r\n//","/* \r\nImports \r\n*/\r\n    import { ModuleWithProviders } from '@angular/core';\r\n    import { Routes, RouterModule } from '@angular/router';\r\n    import { HomePageComponent } from './home-page.component';\r\n//\r\n\r\n\r\n/* \r\nDefinition \r\n*/\r\n    const route: Routes = [\r\n        {\r\n            path: '',\r\n            component: HomePageComponent\r\n        }\r\n    ];\r\n//\r\n\r\n\r\n/* \r\nExport \r\n*/\r\n    export const Routing: ModuleWithProviders = RouterModule.forChild(route);\r\n//"],"sourceRoot":""}