{"version":3,"sources":["webpack:///./src/app/routes/identity-validation/identity-validation.component.html","webpack:///./src/app/routes/identity-validation/identity-validation.component.ts","webpack:///./src/app/routes/identity-validation/module.ts","webpack:///./src/app/routes/identity-validation/router.ts"],"names":[],"mappings":"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","file":"routes-identity-validation-module.js","sourcesContent":["module.exports = \"<h2>Validation de votre identit√©</h2>\\r\\n<form [formGroup]=\\\"form\\\" (submit)=\\\"submitForm()\\\">\\r\\n  <label for=\\\"password\\\">Quel est votre mot de passe ?</label>\\r\\n  <input type=\\\"password\\\" name=\\\"password\\\" id=\\\"password\\\" required minlength=\\\"5\\\" formControlName = \\\"password\\\">\\r\\n  <button type=\\\"submit\\\" [disabled]='!form.valid'>Valider</button>\\r\\n</form>\\r\\n\\r\\n<app-form-response\\r\\n  *ngIf=\\\"displayReturn\\\"\\r\\n  [content]=\\\"apiMessage\\\"\\r\\n  [class]=\\\"messageClass\\\"\\r\\n  (close)=\\\"displayReturn = false\\\"\\r\\n></app-form-response>\"","/* \r\nImports & definition \r\n*/\r\n  // Imports\r\n  import { Component, OnInit } from '@angular/core';\r\n  import { ActivatedRoute } from '@angular/router';\r\n  import { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\r\n\r\n  // Inner\r\n  import { UserModel } from '../../models/user.model';\r\n  import { ApiResponseModel } from \"../../models/api.reponse.model\";\r\n  import { AuthService } from \"../../services/auth/auth-service.service\";\r\n\r\n  @Component({\r\n    selector: 'app-identity-validation',\r\n    templateUrl: './identity-validation.component.html',\r\n    providers: [ AuthService ]\r\n  })\r\n//\r\n\r\n\r\n/* \r\nExport\r\n*/\r\n  export class IdentityValidationComponent implements OnInit {\r\n    /* \r\n    Config.\r\n    */\r\n      // Declaration\r\n      private userId: String;\r\n      public form: FormGroup;\r\n      public resetFormData: Boolean = false;\r\n      public displayReturn: Boolean = false;\r\n      public messageClass: String;\r\n      public apiMessage: String;\r\n\r\n      // Module injection\r\n      constructor(\r\n        private ActivatedRoute: ActivatedRoute,\r\n        private AuthService: AuthService,\r\n        private FormBuilder: FormBuilder\r\n      ) {};\r\n    //\r\n\r\n\r\n    /*\r\n    Methods\r\n    */\r\n        // Reset form\r\n        private resetForm = () => {\r\n          // Set validator\r\n          this.form = this.FormBuilder.group({\r\n            password: [undefined, Validators.required],\r\n          });\r\n        };\r\n\r\n        // Get route param\r\n        private extractParam = () => {\r\n          this.ActivatedRoute.params.forEach( param => {\r\n            this.userId = param.id\r\n          });\r\n        };\r\n\r\n        // Check identity\r\n        private submitForm = () => {\r\n          this.AuthService.identityValidation(this.userId, this.form.value.password)\r\n          .then( (apiResponse: ApiResponseModel) => {\r\n            // API success response\r\n            this.messageClass = 'success';\r\n            this.apiMessage = apiResponse.message;\r\n            this.displayReturn = true;\r\n\r\n            // Reset form data\r\n            this.resetForm();\r\n          })\r\n          .catch( (apiResponse: ApiResponseModel) => {\r\n            // API error response\r\n            this.messageClass = 'error';\r\n            this.apiMessage = apiResponse.message;\r\n            this.displayReturn = true;\r\n          })\r\n        }\r\n    //\r\n\r\n\r\n    /* \r\n    Hooks\r\n    */\r\n      ngOnInit() {\r\n        // Reset form data\r\n        this.resetForm();\r\n\r\n        // Get identity ID\r\n        this.extractParam();\r\n      };\r\n    //\r\n  }\r\n//","/* \r\nImports \r\n*/\r\n    // Angular\r\n    import { NgModule } from '@angular/core';\r\n    import { CommonModule } from '@angular/common';\r\n    import { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\n    // Inner\r\n    import { Routing } from './router';\r\n    import { IdentityValidationComponent } from './identity-validation.component';\r\n    import { FormResponseModule } from \"../../components/form-response/module\";\r\n//\r\n\r\n\r\n/* \r\nDefinition \r\n*/\r\n    @NgModule({\r\n        declarations: [ IdentityValidationComponent ],\r\n        imports: [ \r\n            CommonModule, \r\n            Routing,\r\n            FormsModule, \r\n            ReactiveFormsModule,\r\n            FormResponseModule\r\n        ]\r\n    })\r\n//\r\n\r\n\r\n/* \r\nExport \r\n*/\r\n    export class Module {};\r\n//","/* \r\nImports \r\n*/\r\n    import { ModuleWithProviders } from '@angular/core';\r\n    import { Routes, RouterModule } from '@angular/router';\r\n    import { IdentityValidationComponent } from './identity-validation.component';\r\n//\r\n\r\n\r\n/* \r\nDefinition \r\n*/\r\n    const route: Routes = [\r\n        {\r\n            path: ':id',\r\n            component: IdentityValidationComponent\r\n        }\r\n    ];\r\n//\r\n\r\n\r\n/* \r\nExport \r\n*/\r\n    export const Routing: ModuleWithProviders = RouterModule.forChild(route);\r\n//"],"sourceRoot":""}