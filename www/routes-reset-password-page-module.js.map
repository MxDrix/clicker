{"version":3,"sources":["webpack:///./src/app/routes/reset-password-page/module.ts","webpack:///./src/app/routes/reset-password-page/reset-password-page.component.html","webpack:///./src/app/routes/reset-password-page/reset-password-page.component.ts","webpack:///./src/app/routes/reset-password-page/router.ts"],"names":[],"mappings":"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","file":"routes-reset-password-page-module.js","sourcesContent":["/* \r\nImports \r\n*/\r\n    // Angular\r\n    import { NgModule } from '@angular/core';\r\n    import { CommonModule } from '@angular/common';\r\n    import { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\n    // Inner\r\n    import { Routing } from './router';\r\n    import { ResetPasswordPageComponent } from './reset-password-page.component';\r\n    import { FormResponseModule } from \"../../components/form-response/module\";\r\n//\r\n\r\n\r\n/* \r\nDefinition \r\n*/\r\n    @NgModule({\r\n        declarations: [ ResetPasswordPageComponent ],\r\n        imports: [ \r\n            CommonModule, \r\n            Routing,\r\n            FormsModule, \r\n            ReactiveFormsModule,\r\n            FormResponseModule\r\n        ]\r\n    })\r\n//\r\n\r\n\r\n/* \r\nExport \r\n*/\r\n    export class Module {};\r\n//","module.exports = \"<h2>Changer de mot de passe</h2>\\r\\n<form autocomplete=\\\"off\\\" novalidate [formGroup]=\\\"form\\\" (submit)=\\\"submitForm()\\\">\\r\\n  <label for=\\\"actualPassword\\\">Mot de passe actuel</label>\\r\\n  <input type=\\\"password\\\" name=\\\"actualPassword\\\" id=\\\"actualPassword\\\" required minlength=\\\"5\\\" formControlName = \\\"password\\\">\\r\\n\\r\\n  <label for=\\\"newPassword\\\">Nouveau mot de passe</label>\\r\\n  <input type=\\\"password\\\" name=\\\"newPassword\\\" id=\\\"newPassword\\\" required minlength=\\\"5\\\" formControlName = \\\"newPassword\\\">\\r\\n\\r\\n  <label for=\\\"newPasswordSecure\\\">Nouveau mot de passe <span *ngIf=\\\"passwordError\\\">Incorrect</span></label>\\r\\n  <input type=\\\"password\\\" name=\\\"newPasswordSecure\\\" id=\\\"newPasswordSecure\\\" required minlength=\\\"5\\\" formControlName = \\\"secureNewPassword\\\" (focus)=\\\"passwordError = false\\\">\\r\\n\\r\\n  <button type=\\\"submit\\\" [disabled]='!form.valid'>Valider</button>\\r\\n</form>\\r\\n\\r\\n<app-form-response\\r\\n    *ngIf=\\\"displayReturn\\\"\\r\\n    [content]=\\\"apiMessage\\\"\\r\\n    [class]=\\\"messageClass\\\"\\r\\n    (close)=\\\"displayReturn = false\\\"\\r\\n></app-form-response>\"","/* \r\nImports & definition \r\n*/\r\n  // Imports\r\n  import { Component, OnInit,Input, Output, EventEmitter, OnChanges } from '@angular/core';\r\n  import { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\r\n\r\n  // Inner\r\n  import { AuthService } from \"../../services/auth/auth-service.service\";\r\n  import { ApiResponseModel } from \"../../models/api.reponse.model\";\r\n\r\n  // Definition\r\n  @Component({\r\n    selector: 'app-reset-password-page',\r\n    templateUrl: './reset-password-page.component.html',\r\n    providers: [ AuthService ]\r\n  })\r\n//\r\n\r\n\r\n/* \r\nExport \r\n*/\r\n  export class ResetPasswordPageComponent implements OnInit {\r\n    /* \r\n    Config.\r\n    */\r\n      // Declaration\r\n      public form: FormGroup;\r\n      public formData: any;\r\n      public passwordError: Boolean = false;\r\n      public resetFormData: Boolean = false;\r\n      public displayReturn: Boolean = false;\r\n      public messageClass: String;\r\n      public apiMessage: String;\r\n\r\n      // Instanciation\r\n      constructor(\r\n        private AuthService: AuthService,\r\n        private FormBuilder: FormBuilder\r\n      ) { };\r\n    //\r\n\r\n    /* \r\n    Methods\r\n    */\r\n      // Reset form\r\n      private resetForm = () => {\r\n        // Set validator\r\n        this.form = this.FormBuilder.group({\r\n          password: [undefined, Validators.required],\r\n          newPassword: [undefined, Validators.required],\r\n          secureNewPassword: [undefined, Validators.required]\r\n        });\r\n      };\r\n\r\n      // Submit form\r\n      public submitForm = () => {\r\n        // Check passwords\r\n        if(this.form.value.newPassword !== this.form.value.secureNewPassword){ this.passwordError = true } \r\n        else{\r\n          this.AuthService.restPassword(this.form.value.password, this.form.value.newPassword)\r\n          .then( (apiResponse: ApiResponseModel) => {\r\n            // API success response\r\n            this.messageClass = 'success';\r\n            this.apiMessage = apiResponse.message;\r\n            this.displayReturn = true;\r\n\r\n            // Reset form data\r\n            this.resetFormData = true;\r\n          })\r\n          .catch( (apiResponse: ApiResponseModel) => {\r\n            console.log(apiResponse)\r\n            // API error response\r\n            this.messageClass = 'error';\r\n            this.apiMessage = apiResponse.message;\r\n            this.displayReturn = true;\r\n          })\r\n        };\r\n      };\r\n    //\r\n\r\n    /* \r\n    Hooks\r\n    */\r\n      ngOnInit() {\r\n        this.resetForm();\r\n      };\r\n    //\r\n  };\r\n//","/* \r\nImports \r\n*/\r\n    import { ModuleWithProviders } from '@angular/core';\r\n    import { Routes, RouterModule } from '@angular/router';\r\n    import { ResetPasswordPageComponent } from './reset-password-page.component';\r\n//\r\n\r\n\r\n/* \r\nDefinition \r\n*/\r\n    const route: Routes = [\r\n        {\r\n            path: '',\r\n            component: ResetPasswordPageComponent\r\n        }\r\n    ];\r\n//\r\n\r\n\r\n/* \r\nExport \r\n*/\r\n    export const Routing: ModuleWithProviders = RouterModule.forChild(route);\r\n//"],"sourceRoot":""}